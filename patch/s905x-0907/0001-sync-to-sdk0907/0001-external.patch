diff --git a/conscrypt/src/main/java/org/conscrypt/NativeCrypto.java b/conscrypt/src/main/java/org/conscrypt/NativeCrypto.java
index 264901f..0633e98 100644
--- a/conscrypt/src/main/java/org/conscrypt/NativeCrypto.java
+++ b/conscrypt/src/main/java/org/conscrypt/NativeCrypto.java
@@ -1011,6 +1011,8 @@ public final class NativeCrypto {
     public static native void SSL_set_session_creation_enabled(
             long sslNativePointer, boolean creationEnabled) throws SSLException;
 
+    public static native boolean SSL_session_reused(long sslNativePointer);
+
     public static native void SSL_set_reject_peer_renegotiations(
             long sslNativePointer, boolean renegotiationRejected) throws SSLException;
 
diff --git a/conscrypt/src/main/java/org/conscrypt/SSLParametersImpl.java b/conscrypt/src/main/java/org/conscrypt/SSLParametersImpl.java
index 0101935..312f923 100644
--- a/conscrypt/src/main/java/org/conscrypt/SSLParametersImpl.java
+++ b/conscrypt/src/main/java/org/conscrypt/SSLParametersImpl.java
@@ -588,8 +588,7 @@ public class SSLParametersImpl implements Cloneable {
             final OpenSSLSessionImpl sessionToReuse, String hostname, int port,
             boolean handshakeCompleted) throws IOException {
         OpenSSLSessionImpl sslSession = null;
-        byte[] sessionId = NativeCrypto.SSL_SESSION_session_id(sslSessionNativePointer);
-        if (sessionToReuse != null && Arrays.equals(sessionToReuse.getId(), sessionId)) {
+        if (sessionToReuse != null && NativeCrypto.SSL_session_reused(sslNativePointer)) {
             sslSession = sessionToReuse;
             sslSession.lastAccessedTime = System.currentTimeMillis();
             NativeCrypto.SSL_SESSION_free(sslSessionNativePointer);
diff --git a/conscrypt/src/main/native/org_conscrypt_NativeCrypto.cpp b/conscrypt/src/main/native/org_conscrypt_NativeCrypto.cpp
index 6c68750..fe08d7c 100644
--- a/conscrypt/src/main/native/org_conscrypt_NativeCrypto.cpp
+++ b/conscrypt/src/main/native/org_conscrypt_NativeCrypto.cpp
@@ -8895,6 +8895,18 @@ static void NativeCrypto_SSL_set_session_creation_enabled(JNIEnv* env, jclass,
 #endif
 }
 
+static jboolean NativeCrypto_SSL_session_reused(JNIEnv* env, jclass, jlong ssl_address) {
+    SSL* ssl = to_SSL(env, ssl_address, true);
+    JNI_TRACE("ssl=%p NativeCrypto_SSL_session_reused", ssl);
+    if (ssl == nullptr) {
+        return JNI_FALSE;
+    }
+
+    int reused = SSL_session_reused(ssl);
+    JNI_TRACE("ssl=%p NativeCrypto_SSL_session_reused => %d", ssl, reused);
+    return reused == 1 ? JNI_TRUE : JNI_FALSE;
+}
+
 static void NativeCrypto_SSL_set_reject_peer_renegotiations(JNIEnv* env, jclass,
         jlong ssl_address, jboolean reject_renegotiations)
 {
@@ -10844,6 +10856,7 @@ static JNINativeMethod sNativeCryptoMethods[] = {
     NATIVE_METHOD(NativeCrypto, SSL_set_verify, "(JI)V"),
     NATIVE_METHOD(NativeCrypto, SSL_set_session, "(JJ)V"),
     NATIVE_METHOD(NativeCrypto, SSL_set_session_creation_enabled, "(JZ)V"),
+    NATIVE_METHOD(NativeCrypto, SSL_session_reused, "(J)Z"),
     NATIVE_METHOD(NativeCrypto, SSL_set_reject_peer_renegotiations, "(JZ)V"),
     NATIVE_METHOD(NativeCrypto, SSL_set_tlsext_host_name, "(JLjava/lang/String;)V"),
     NATIVE_METHOD(NativeCrypto, SSL_get_servername, "(J)Ljava/lang/String;"),
diff --git a/sepolicy/app.te b/sepolicy/app.te
index 5830ecb..40de074 100644
--- a/sepolicy/app.te
+++ b/sepolicy/app.te
@@ -287,8 +287,8 @@ neverallow { appdomain -shell userdebug_or_eng(`-su') } { domain -appdomain }:pr
     { transition dyntransition };
 
 # Write to rootfs.
-#neverallow appdomain rootfs:dir_file_class_set
-#    { create write setattr relabelfrom relabelto append unlink link rename };
+neverallow appdomain rootfs:dir_file_class_set
+    { create write setattr relabelfrom relabelto append unlink link rename };
 
 # Write to /system.
 neverallow appdomain system_file:dir_file_class_set
diff --git a/sepolicy/domain.te b/sepolicy/domain.te
index 9e79469..0f6c6da 100644
--- a/sepolicy/domain.te
+++ b/sepolicy/domain.te
@@ -281,7 +281,7 @@ neverallow { domain -init -ueventd } device:chr_file { open read write };
 # Limit what domains can mount filesystems or change their mount flags.
 # sdcard_type / vfat is exempt as a larger set of domains need
 # this capability, including device-specific domains.
-#neverallow { domain -kernel -init -recovery -vold -zygote } { fs_type -sdcard_type }:filesystem { mount remount relabelfrom relabelto };
+neverallow { domain -kernel -init -recovery -vold -zygote } { fs_type -sdcard_type }:filesystem { mount remount relabelfrom relabelto };
 
 #
 # Assert that, to the extent possible, we're not loading executable content from
@@ -315,7 +315,7 @@ neverallow { domain -recovery -kernel } { system_file exec_type }:dir_file_class
 neverallow domain { system_file exec_type }:dir_file_class_set mounton;
 
 # Nothing should be writing to files in the rootfs.
-#neverallow domain rootfs:file { create write setattr relabelto append unlink link rename };
+neverallow domain rootfs:file { create write setattr relabelto append unlink link rename };
 
 # Restrict context mounts to specific types marked with
 # the contextmount_type attribute.
diff --git a/sepolicy/file_contexts b/sepolicy/file_contexts
index b7c67fa..d964f9b 100644
--- a/sepolicy/file_contexts
+++ b/sepolicy/file_contexts
@@ -189,9 +189,6 @@
 /vendor(/.*)?		u:object_r:system_file:s0
 /vendor/bin/gpsd	u:object_r:gpsd_exec:s0
 
-# add by Elric Fu
-/ghost(/.*)?            u:object_r:system_data_file:s0
-
 #############################
 # OEM and ODM files
 #
diff --git a/sepolicy/init.te b/sepolicy/init.te
index 039ec3a..41eafe2 100644
--- a/sepolicy/init.te
+++ b/sepolicy/init.te
@@ -283,4 +283,4 @@ neverallow init shell_data_file:lnk_file read;
 neverallow init app_data_file:lnk_file read;
 
 # init should never execute a program without changing to another domain.
-#neverallow init { file_type fs_type }:file execute_no_trans;
+neverallow init { file_type fs_type }:file execute_no_trans;
diff --git a/sepolicy/toolbox.te b/sepolicy/toolbox.te
index 43e567f..4341102 100644
--- a/sepolicy/toolbox.te
+++ b/sepolicy/toolbox.te
@@ -6,7 +6,6 @@ type toolbox_exec, exec_type, file_type;
 
 init_daemon_domain(toolbox)
 
-allow toolbox self:capability { sys_admin };
 # /dev/__null__ created by init prior to policy load,
 # open fd inherited by fsck.
 allow toolbox tmpfs:chr_file { read write ioctl };
@@ -20,9 +19,6 @@ allow toolbox devpts:chr_file { read write getattr ioctl };
 # device/<vendor>/<product>/sepolicy/file_contexts file.
 allow toolbox block_device:dir search;
 allow toolbox swap_block_device:blk_file rw_file_perms;
-allow toolbox rootfs:filesystem { remount };
-allow toolbox rootfs:dir { create write add_name setattr };
-allow toolbox rootfs:file { create write setattr };
 
 # Only allow entry from init via the toolbox binary.
 neverallow { domain -init } toolbox:process transition;
diff --git a/toybox/Android.mk b/toybox/Android.mk
index 645da6d..c75a14d 100644
--- a/toybox/Android.mk
+++ b/toybox/Android.mk
@@ -90,6 +90,7 @@ LOCAL_SRC_FILES := \
     toys/other/freeramdisk.c \
     toys/other/fsfreeze.c \
     toys/other/help.c \
+    toys/other/hwclock.c \
     toys/other/ifconfig.c \
     toys/other/inotifyd.c \
     toys/other/insmod.c \
@@ -130,7 +131,6 @@ LOCAL_SRC_FILES := \
     toys/other/yes.c \
     toys/pending/dd.c \
     toys/pending/expr.c \
-    toys/pending/hwclock.c \
     toys/pending/more.c \
     toys/pending/pgrep.c \
     toys/pending/netstat.c \
diff --git a/toybox/toys/other/hwclock.c b/toybox/toys/other/hwclock.c
new file mode 100644
index 0000000..c9fca49
--- /dev/null
+++ b/toybox/toys/other/hwclock.c
@@ -0,0 +1,136 @@
+/* hwclock.c - get and set the hwclock
+ *
+ * Copyright 2014 Bilal Qureshi <bilal.jmi@gmail.com>
+ *
+ * No standard, but see Documentation/rtc.txt in the linux kernel source..
+ *
+USE_HWCLOCK(NEWTOY(hwclock, ">0(fast)f(rtc):u(utc)l(localtime)t(systz)s(hctosys)r(show)w(systohc)[-ul][!rtsw]", TOYFLAG_USR|TOYFLAG_BIN))
+
+config HWCLOCK
+  bool "hwclock"
+  default y
+  help
+    usage: hwclock [-rswtluf]
+
+    -f FILE Use specified device file instead of /dev/rtc (--rtc)
+    -l      Hardware clock uses localtime (--localtime)
+    -r      Show hardware clock time (--show)
+    -s      Set system time from hardware clock (--hctosys)
+    -t      Set the system time based on the current timezone (--systz)
+    -u      Hardware clock uses UTC (--utc)
+    -w      Set hardware clock from system time (--systohc)
+*/
+
+#define FOR_hwclock
+#include "toys.h"
+#include <linux/rtc.h>
+
+GLOBALS(
+  char *fname;
+
+  int utc;
+)
+
+static int rtc_find(struct dirtree* node)
+{
+  FILE *fp;
+
+  if (!node->parent) return DIRTREE_RECURSE;
+
+  snprintf(toybuf, sizeof(toybuf), "/sys/class/rtc/%s/hctosys", node->name);
+  fp = fopen(toybuf, "r");
+  if (fp) {
+    int hctosys = 0, items = fscanf(fp, "%d", &hctosys);
+
+    fclose(fp);
+    if (items == 1 && hctosys == 1) {
+      snprintf(toybuf, sizeof(toybuf), "/dev/%s", node->name);
+      TT.fname = toybuf;
+
+      return DIRTREE_ABORT;
+    }
+  }
+
+  return 0;
+}
+
+void hwclock_main()
+{
+  struct timezone tzone;
+  struct timeval timeval;
+  struct tm tm;
+  time_t time;
+  int fd = -1;
+
+  // check for Grenich Mean Time
+  if (toys.optflags & FLAG_u) TT.utc = 1;
+  else {
+    FILE *fp;
+    char *s = 0;
+
+    for (fp = fopen("/etc/adjtime", "r");
+         fp && getline(&s, (void *)toybuf, fp)>0;
+         free(s), s = 0) TT.utc += !strncmp(s, "UTC", 3);
+    if (fp) fclose(fp);
+  }
+
+  if (!(toys.optflags&FLAG_t)) {
+    int w = toys.optflags & FLAG_w, flag = O_WRONLY*w;
+
+    // Open /dev/rtc (if your system has no /dev/rtc symlink, search for it).
+    if (!TT.fname && (fd = open("/dev/rtc", flag)) == -1) {
+      dirtree_read("/sys/class/rtc", rtc_find);
+      if (!TT.fname) TT.fname = "/dev/misc/rtc";
+    }
+    if (fd == -1) fd = xopen(TT.fname, flag);
+
+    // Get current time in seconds from rtc device. todo: get subsecond time
+    if (!w) {
+      char *s = s;
+
+      xioctl(fd, RTC_RD_TIME, &tm);
+      if (TT.utc) s = xtzset("UTC0");
+      if ((time = mktime(&tm)) < 0) error_exit("mktime failed");
+      if (TT.utc) {
+        free(xtzset(s));
+        free(s);
+      }
+    }
+  }
+
+  if (toys.optflags & (FLAG_w|FLAG_t)) {
+    if (gettimeofday(&timeval, 0)) perror_exit("gettimeofday failed");
+    if (!(TT.utc ? gmtime_r : localtime_r)(&timeval.tv_sec, &tm))
+      error_exit(TT.utc ? "gmtime_r failed" : "localtime_r failed");
+  }
+
+  if (toys.optflags & FLAG_w) {
+    /* The value of tm_isdst will positive if daylight saving time is in effect,
+     * zero if it is not and negative if the information is not available.
+     * todo: so why isn't this negative...? */
+    tm.tm_isdst = 0;
+    xioctl(fd, RTC_SET_TIME, &tm);
+  } else if (toys.optflags & FLAG_s) {
+    tzone.tz_minuteswest = timezone / 60 - 60 * daylight;
+    timeval.tv_sec = time;
+    timeval.tv_usec = 0; // todo: fixit
+  } else if (toys.optflags & FLAG_t) {
+    // Adjust seconds for timezone and daylight saving time
+    // extern long timezone is defined in header sys/time.h
+    tzone.tz_minuteswest = timezone / 60;
+    if (tm.tm_isdst) tzone.tz_minuteswest -= 60;
+    if (!TT.utc) timeval.tv_sec += tzone.tz_minuteswest * 60;
+  } else {
+    char *c = ctime(&time), *s = strrchr(c, '\n');
+
+    if (s) *s = '\0';
+    // TODO: implement this.
+    xprintf("%s  0.000000 seconds\n", c);
+  }
+  if (toys.optflags & (FLAG_t|FLAG_s)) {
+    tzone.tz_dsttime = 0;
+    if (settimeofday(&timeval, &tzone)) perror_exit("settimeofday failed");
+  }
+
+  if (fd != -1) close(fd);
+}
diff --git a/toybox/toys/pending/hwclock.c b/toybox/toys/pending/hwclock.c
deleted file mode 100644
index d9ced6f..0000000
--- a/toybox/toys/pending/hwclock.c
+++ /dev/null
@@ -1,138 +0,0 @@
-/* hwclock.c - get and set the hwclock
- *
- * Copyright 2014 Bilal Qureshi <bilal.jmi@gmail.com>
- *
- * No standard, but see Documentation/rtc.txt in the linux kernel source..
- *
-USE_HWCLOCK(NEWTOY(hwclock, ">0(fast)f(rtc):u(utc)l(localtime)t(systz)s(hctosys)r(show)w(systohc)[-ul][!rtsw]", TOYFLAG_USR|TOYFLAG_BIN))
-
-config HWCLOCK
-  bool "hwclock"
-  default n
-  help
-    usage: hwclock [-rswtluf]
-
-    -f FILE Use specified device file instead of /dev/rtc (--rtc)
-    -l      Hardware clock uses localtime (--localtime)
-    -r      Show hardware clock time (--show)
-    -s      Set system time from hardware clock (--hctosys)
-    -t      Set the system time based on the current timezone (--systz)
-    -u      Hardware clock uses UTC (--utc)
-    -w      Set hardware clock from system time (--systohc)
-*/
-
-#define FOR_hwclock
-#include "toys.h"
-#include <linux/rtc.h>
-
-GLOBALS(
-  char *fname;
-
-  int utc;
-)
-
-static int rtc_find(struct dirtree* node)
-{
-  FILE *fp;
-
-  if (!node->parent) return DIRTREE_RECURSE;
-
-  snprintf(toybuf, sizeof(toybuf), "/sys/class/rtc/%s/hctosys", node->name);
-  fp = fopen(toybuf, "r");
-  if (fp) {
-    int hctosys = 0, items = fscanf(fp, "%d", &hctosys);
-
-    fclose(fp);
-    if (items == 1 && hctosys == 1) {
-      snprintf(toybuf, sizeof(toybuf), "/dev/%s", node->name);
-      TT.fname = toybuf;
-
-      return DIRTREE_ABORT;
-    }
-  }
-
-  return 0;
-}
-
-void hwclock_main()
-{
-  struct timezone tzone;
-  struct timeval timeval;
-  struct tm tm;
-  time_t time;
-  int fd = -1;
-
-  // check for Grenich Mean Time
-  if (toys.optflags & FLAG_u) TT.utc = 1;
-  else {
-    FILE *fp;
-    char *s = 0;
-
-    for (fp = fopen("/etc/adjtime", "r");
-         fp && getline(&s, (void *)toybuf, fp)>0;
-         free(s), s = 0) TT.utc += !strncmp(s, "UTC", 3);
-    if (fp) fclose(fp);
-  }
-
-  if (!(toys.optflags&FLAG_t)) {
-    int w = toys.optflags & FLAG_w, flag = O_WRONLY*w;
-
-    // Open /dev/rtc (if your system has no /dev/rtc symlink, search for it).
-    if (!TT.fname && (fd = open("/dev/rtc", flag)) == -1) {
-      dirtree_read("/sys/class/rtc", rtc_find);
-      if (!TT.fname) TT.fname = "/dev/misc/rtc";
-    }
-    if (fd == -1) fd = xopen(TT.fname, flag);
-
-    // Get current time in seconds from rtc device. todo: get subsecond time
-    if (!w) {
-      char *s = s;
-
-      xioctl(fd, RTC_RD_TIME, &tm);
-      if (TT.utc) s = xtzset("UTC0");
-      if ((time = mktime(&tm)) < 0) goto bad;
-      if (TT.utc) {
-        free(xtzset(s));
-        free(s);
-      }
-    }
-  }
-
-  if (toys.optflags & (FLAG_w|FLAG_t))
-    if (gettimeofday(&timeval, 0)
-        || (TT.utc ? gmtime_r : localtime_r)(&timeval.tv_sec, &tm)) goto bad;
-
-  if (toys.optflags & FLAG_w) {
-    /* The value of tm_isdst will positive if daylight saving time is in effect,
-     * zero if it is not and negative if the information is not available. 
-     * todo: so why isn't this negative...? */
-    tm.tm_isdst = 0;
-    xioctl(fd, RTC_SET_TIME, &time);
-  } else if (toys.optflags & FLAG_s) {
-    tzone.tz_minuteswest = timezone / 60 - 60 * daylight;
-    timeval.tv_sec = time;
-    timeval.tv_usec = 0; // todo: fixit
-  } else if (toys.optflags & FLAG_t) {
-    // Adjust seconds for timezone and daylight saving time
-    // extern long timezone is defined in header sys/time.h
-    tzone.tz_minuteswest = timezone / 60;
-    if (tm.tm_isdst) tzone.tz_minuteswest -= 60;
-    if (!TT.utc) timeval.tv_sec += tzone.tz_minuteswest * 60;
-  } else {
-    char *c = ctime(&time), *s = strrchr(c, '\n');
-
-    if (s) *s = '\0';
-    // TODO: implement this.
-    xprintf("%s  0.000000 seconds\n", c);
-  }
-  if (toys.optflags & (FLAG_t|FLAG_s)) {
-    tzone.tz_dsttime = 0;
-    if (settimeofday(&timeval, &tzone)) goto bad;
-  }
-
-  if (fd != -1) close(fd);
-
-  return;
-bad:
-  perror_exit("failed");
-}
